service: xade-wallet-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  environment:
    CROSSMINT_API_KEY: sk_production_5uXEsxyFrxKi62DRV2Z8B2y9qTkGm1ZbGz1w7ygRgcrMVz2kPRHSwqQMxHMrw3U5UGBKVdCp2vqZ1HwJ4yBpfqkuP4tYXwXvut1prh726NgiMWnDC4kERejWZouk9pz4JCF4YoiWeL2Ctx3HGmw268mXA4kirkZSRTUNgx5YSxQaBU2sJAAyiJB7hYCE36fw3KpCGWbmf8TCM9oe2JsMp3s3
    ADMIN_WALLET_ADDRESS: 0x64Cd524Ff27b0DA351E56c9d684fb50d47ae45C9
    WALLET_ADDRESS: 0xaC97a2dA6aC62Bad4f63B43F7A823793EcFf7276
    DELEGATED_KEY_ADDRESS: 0x64Cd524Ff27b0DA351E56c9d684fb50d47ae45C9
    KMS_KEY_ID: 41501233-fbf5-4c9f-8467-25af7d035edc
    KEYS_TABLE_NAME: Xade_Crossmint
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource: 
            - arn:aws:dynamodb:ap-south-1:124355643622:table/Xade_Crossmint
            - arn:aws:dynamodb:ap-south-1:124355643622:table/Xade_Crossmint/index/*
        - Effect: Allow
          Action:
            - kms:Decrypt
            - kms:GenerateDataKey
            - kms:Encrypt
            - kms:DescribeKey
          Resource: arn:aws:kms:ap-south-1:124355643622:key/41501233-fbf5-4c9f-8467-25af7d035edc

resources:
  Resources:
    KeysTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Xade_Crossmint
        AttributeDefinitions:
          - AttributeName: address
            AttributeType: S
        KeySchema:
          - AttributeName: address
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true

functions:
  createWallet:
    handler: handler.createWallet
    name: ${self:service}-${self:provider.stage}-createWallet
    events:
      - http:
          path: /wallet
          method: post
          private: true
          cors: true

  createTransaction:
    handler: handler.createTransaction
    name: ${self:service}-${self:provider.stage}-createTransaction
    events:
      - http:
          path: /transaction/create
          method: post
          private: true
          cors: true

  signTransaction:
    handler: handler.signTransaction
    name: ${self:service}-${self:provider.stage}-signTransaction
    events:
      - http:
          path: /transaction/sign
          method: post
          private: true
          cors: true

  approveTransaction:
    handler: handler.approveTransaction
    name: ${self:service}-${self:provider.stage}-approveTransaction
    events:
      - http:
          path: /transaction/approve
          method: post
          private: true
          cors: true

  submitTransactionToBlockchain:
    handler: handler.submitTransactionToBlockchain
    name: ${self:service}-${self:provider.stage}-submitTransactionToBlockchain
    events:
      - http:
          path: /transactions/{transactionId}/submit
          method: post
          private: true
          cors: true

  keyManager:
    handler: key-manager.handler
    name: ${self:service}-${self:provider.stage}-keyManager
    events:
      - http:
          path: /keys
          method: post
          private: true
          cors: true

  storeDelegatedKey:
    handler: handler.storeDelegatedKey
    name: ${self:service}-${self:provider.stage}-storeDelegatedKey
    events:
      - http:
          path: /delegated-key
          method: post
          private: true
          cors: true

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  dotenv:
    path: .env.${opt:stage, 'dev'} 